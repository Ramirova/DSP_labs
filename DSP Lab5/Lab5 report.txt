{\rtf1\ansi\ansicpg1251\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Digital Signal Processing\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Lab 5\
In this lab I implemented:\
1) generation of 
\f1\i\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Dual-Tone Multi-Frequency, DTMF tones. I implemented melody generation using this tones. Function generateDTMF takes 4 arguments as an input:\
digitt - number for which we generate a tome   \
duration - time in seconds\
fs - sampling frequency\
silence_duration - if we want generate a silence, as a digit you should pass -1 and for this argument pass a duration of silence \
\
2) decoding generated melody to the numbers \
dtmfscor(signal, testing_freq, L, fs) \
Signal - tone of phone which we will test\
testing_freq - frequency which we are trying to find in given signal \
L - is filter bandwidth, usually should be equal to more than 60, e.g. 100\
fs - sampling frequency \
}